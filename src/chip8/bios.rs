use crate::chip8::{Memory};
use std::io::{BufReader, Read, Error};
use std::fs::File;

pub struct Bios {
    fontset: [u8; 80]
}
impl Bios {
    pub fn new() -> Self {
        Self {
            fontset: [
                0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
                0x20, 0x60, 0x20, 0x20, 0x70, // 1
                0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
                0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
                0x90, 0x90, 0xF0, 0x10, 0x10, // 4
                0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
                0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
                0xF0, 0x10, 0x20, 0x40, 0x40, // 7
                0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
                0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
                0xF0, 0x90, 0xF0, 0x90, 0x90, // A
                0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
                0xF0, 0x80, 0x80, 0x80, 0xF0, // C
                0xE0, 0x90, 0x90, 0x90, 0xE0, // D
                0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
                0xF0, 0x80, 0xF0, 0x80, 0x80  // F
            ]
        }
    }

    pub fn load(&self, memory: &mut Memory) {
        memory.copy(0x50, &self.fontset);
    }

    pub fn load_rom_file(&self, memory: &mut Memory, file: &str) -> Result<(), Error> {
        let mut buffer: Vec<u8> = Vec::new();
        BufReader::new(File::open(file)?).read_to_end(&mut buffer)?;
        self.load_rom(memory, &buffer);
        Ok(())
    }
    pub fn load_rom(&self, memory: &mut Memory, buffer: &[u8]) {
        memory.copy(0x200, buffer);
    }
}